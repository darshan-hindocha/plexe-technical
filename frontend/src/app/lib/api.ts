/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/models/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview Model
         * @description Preview model metadata before upload.
         */
        post: operations["preview_model_api_v1_models_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/models/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Model
         * @description Upload and deploy an XGBoost model with versioning support.
         */
        post: operations["upload_model_api_v1_models_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Models
         * @description Get all uploaded models or only latest versions.
         */
        get: operations["list_models_api_v1_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/models/{model_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Model
         * @description Get specific model by ID.
         */
        get: operations["get_model_api_v1_models__model_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Model
         * @description Delete a model.
         */
        delete: operations["delete_model_api_v1_models__model_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/models/{model_id}/predict": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predict
         * @description Make a prediction using the specified model.
         */
        post: operations["predict_api_v1_models__model_id__predict_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/models/{model_id}/predict/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predict Batch
         * @description Make batch predictions using the specified model.
         */
        post: operations["predict_batch_api_v1_models__model_id__predict_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ws/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Websocket Status
         * @description Get WebSocket connection status.
         */
        get: operations["websocket_status_api_v1_ws_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint with service information.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_preview_model_api_v1_models_preview_post */
        Body_preview_model_api_v1_models_preview_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_upload_model_api_v1_models_upload_post */
        Body_upload_model_api_v1_models_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Is New Version
             * @default false
             */
            is_new_version: boolean;
            /** Parent Model Id */
            parent_model_id?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ModelListResponse */
        ModelListResponse: {
            /**
             * Models
             * @description List of models
             */
            models: components["schemas"]["ModelMeta"][];
            /**
             * Total
             * @description Total number of models
             */
            total: number;
        };
        /** ModelMeta */
        ModelMeta: {
            /**
             * Name
             * @description Model name
             */
            name: string;
            /**
             * Description
             * @description Model description
             */
            description?: string | null;
            /** @description Type of model */
            model_type?: components["schemas"]["ModelType"] | null;
            /**
             * Id
             * @description Unique model identifier
             */
            id: string;
            /** @default uploaded */
            status: components["schemas"]["ModelStatus"];
            /**
             * File Path
             * @description Path to model file
             */
            file_path?: string | null;
            /**
             * Feature Names
             * @description Expected input features
             */
            feature_names?: string[] | null;
            /**
             * Model Info
             * @description Additional model information
             */
            model_info?: Record<string, never> | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /**
             * Version
             * @description Model version number
             * @default 1
             */
            version: number;
            /**
             * Parent Model Id
             * @description ID of the parent model for versioning
             */
            parent_model_id?: string | null;
            /**
             * Is Latest
             * @description Whether this is the latest version of the model
             * @default true
             */
            is_latest: boolean;
        };
        /**
         * ModelStatus
         * @enum {string}
         */
        ModelStatus: "uploaded" | "deployed" | "error";
        /**
         * ModelType
         * @enum {string}
         */
        ModelType: "classifier" | "regressor";
        /** PredictionBatchRequest */
        PredictionBatchRequest: {
            /**
             * Features
             * @description Batch of input features
             */
            features: Record<string, never>[];
        };
        /** PredictionBatchResponse */
        PredictionBatchResponse: {
            /**
             * Predictions
             * @description Batch predictions
             */
            predictions: components["schemas"]["PredictionResponse"][];
            /**
             * Model Id
             * @description ID of model used for predictions
             */
            model_id: string;
        };
        /** PredictionRequest */
        PredictionRequest: {
            /**
             * Features
             * @description Input features for prediction
             */
            features: Record<string, never>;
        };
        /** PredictionResponse */
        PredictionResponse: {
            /**
             * Prediction
             * @description Model prediction
             */
            prediction: number | string;
            /**
             * Probability
             * @description Prediction probability (for classifiers)
             */
            probability?: number | null;
            /**
             * Confidence
             * @description Confidence level description
             */
            confidence?: string | null;
            /**
             * Model Id
             * @description ID of model used for prediction
             */
            model_id: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    preview_model_api_v1_models_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_preview_model_api_v1_models_preview_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_model_api_v1_models_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_model_api_v1_models_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelMeta"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_models_api_v1_models_get: {
        parameters: {
            query?: {
                latest_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_model_api_v1_models__model_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelMeta"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_model_api_v1_models__model_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_api_v1_models__model_id__predict_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PredictionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_batch_api_v1_models__model_id__predict_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                model_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PredictionBatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PredictionBatchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    websocket_status_api_v1_ws_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
